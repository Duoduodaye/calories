// 热量记录小助手 - 交互脚本\n\n// 当前选中的餐次\nlet currentMeal = 'breakfast';\n\n// 当前模态框中的食物数据\nlet currentFood = {\n    name: '',\n    calories: 0,\n    protein: 0,\n    fat: 0,\n    carbs: 0\n};\n\n// 页面切换函数\nfunction switchPage(pageName) {\n    // 隐藏所有页面\n    const pages = document.querySelectorAll('.page');\n    pages.forEach(page => page.classList.remove('active'));\n    \n    // 显示目标页面\n    const targetPage = document.getElementById(pageName + 'Page');\n    if (targetPage) {\n        targetPage.classList.add('active');\n    }\n    \n    // 更新底部导航栏\n    const tabItems = document.querySelectorAll('.tab-item');\n    tabItems.forEach(tab => tab.classList.remove('active'));\n    \n    const activeTab = document.querySelector(`[onclick=\"switchPage('${pageName}')\"]`);\n    if (activeTab) {\n        activeTab.classList.add('active');\n    }\n    \n    // 更新导航栏标题\n    const navBar = document.querySelector('.nav-bar h1');\n    const titles = {\n        'home': '热量记录小助手',\n        'record': '记录食物',\n        'stats': '热量统计',\n        'profile': '个人设置'\n    };\n    navBar.textContent = titles[pageName] || '热量记录小助手';\n}\n\n// 切换到记录页面并选择餐次\nfunction switchToRecord(meal = 'breakfast') {\n    currentMeal = meal;\n    switchPage('record');\n    \n    // 更新餐次选择状态\n    const mealTabs = document.querySelectorAll('.meal-tab');\n    mealTabs.forEach(tab => {\n        tab.classList.remove('active');\n        if (tab.dataset.meal === meal) {\n            tab.classList.add('active');\n        }\n    });\n}\n\n// 显示重量输入模态框\nfunction showWeightModal(foodName, calories, protein = 2.6, fat = 0.3, carbs = 25.9) {\n    currentFood = { name: foodName, calories, protein, fat, carbs };\n    \n    document.getElementById('modalFoodName').textContent = `添加 ${foodName}`;\n    document.getElementById('modalFoodCal').textContent = `${calories}千卡/100g`;\n    document.getElementById('weightInput').value = '100';\n    \n    updateNutritionPreview();\n    \n    document.getElementById('weightModal').classList.add('show');\n}\n\n// 隐藏重量输入模态框\nfunction hideWeightModal() {\n    document.getElementById('weightModal').classList.remove('show');\n}\n\n// 设置重量\nfunction setWeight(weight) {\n    document.getElementById('weightInput').value = weight;\n    updateNutritionPreview();\n}\n\n// 更新营养成分预览\nfunction updateNutritionPreview() {\n    const weight = parseFloat(document.getElementById('weightInput').value) || 0;\n    const ratio = weight / 100;\n    \n    document.getElementById('previewCalories').textContent = \n        Math.round(currentFood.calories * ratio) + '千卡';\n    document.getElementById('previewProtein').textContent = \n        (currentFood.protein * ratio).toFixed(1) + 'g';\n    document.getElementById('previewFat').textContent = \n        (currentFood.fat * ratio).toFixed(1) + 'g';\n    document.getElementById('previewCarbs').textContent = \n        (currentFood.carbs * ratio).toFixed(1) + 'g';\n}\n\n// 添加食物\nfunction addFood() {\n    const weight = parseFloat(document.getElementById('weightInput').value);\n    \n    if (!weight || weight <= 0) {\n        alert('请输入正确的重量！');\n        return;\n    }\n    \n    // 模拟添加成功\n    showToast(`成功添加 ${currentFood.name} ${weight}g`);\n    hideWeightModal();\n    \n    // 模拟更新页面数据\n    setTimeout(() => {\n        switchPage('home');\n        updateHomePageData();\n    }, 1000);\n}\n\n// 更新首页数据（模拟）\nfunction updateHomePageData() {\n    // 这里可以添加实际的数据更新逻辑\n    console.log('更新首页数据');\n}\n\n// 显示提示消息\nfunction showToast(message) {\n    // 创建提示框\n    const toast = document.createElement('div');\n    toast.style.cssText = `\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: rgba(0, 0, 0, 0.8);\n        color: white;\n        padding: 12px 20px;\n        border-radius: 8px;\n        font-size: 14px;\n        z-index: 9999;\n        animation: fadeInOut 2s ease-in-out;\n    `;\n    toast.textContent = message;\n    \n    // 添加动画样式\n    const style = document.createElement('style');\n    style.textContent = `\n        @keyframes fadeInOut {\n            0%, 100% { opacity: 0; }\n            20%, 80% { opacity: 1; }\n        }\n    `;\n    document.head.appendChild(style);\n    \n    document.body.appendChild(toast);\n    \n    // 2秒后移除\n    setTimeout(() => {\n        document.body.removeChild(toast);\n        document.head.removeChild(style);\n    }, 2000);\n}\n\n// 初始化页面\ndocument.addEventListener('DOMContentLoaded', function() {\n    // 设置默认页面\n    switchPage('home');\n    \n    // 添加餐次选择器事件监听\n    const mealTabs = document.querySelectorAll('.meal-tab');\n    mealTabs.forEach(tab => {\n        tab.addEventListener('click', function() {\n            mealTabs.forEach(t => t.classList.remove('active'));\n            this.classList.add('active');\n            currentMeal = this.dataset.meal;\n        });\n    });\n    \n    // 添加分类标签事件监听\n    const categoryTabs = document.querySelectorAll('.category-tab');\n    categoryTabs.forEach(tab => {\n        tab.addEventListener('click', function() {\n            categoryTabs.forEach(t => t.classList.remove('active'));\n            this.classList.add('active');\n        });\n    });\n    \n    // 重量输入实时更新预览\n    const weightInput = document.getElementById('weightInput');\n    if (weightInput) {\n        weightInput.addEventListener('input', updateNutritionPreview);\n    }\n    \n    // 点击模态框背景关闭\n    document.getElementById('weightModal').addEventListener('click', function(e) {\n        if (e.target === this) {\n            hideWeightModal();\n        }\n    });\n    \n    console.log('热量记录小助手初始化完成！');\n});\n\n// 设置按钮事件\nfunction saveSettings() {\n    showToast('设置已保存！');\n}\n\nfunction clearData() {\n    if (confirm('清空后所有记录和设置都将丢失，无法恢复！\\n\\n确定要清空数据吗？')) {\n        showToast('数据已清空！');\n        // 重置表单\n        setTimeout(() => {\n            const inputs = document.querySelectorAll('#profilePage input');\n            inputs.forEach(input => {\n                if (input.type === 'number') {\n                    input.value = input.getAttribute('placeholder') ? '' : '0';\n                }\n            });\n        }, 1000);\n    }\n}\n\n// 添加一些动画效果\nfunction addHoverEffects() {\n    // 为卡片添加悬停效果\n    const cards = document.querySelectorAll('.card');\n    cards.forEach(card => {\n        card.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-2px)';\n        });\n        \n        card.addEventListener('mouseleave', function() {\n            this.style.transform = 'translateY(0)';\n        });\n    });\n}\n\n// 页面加载完成后添加效果\nwindow.addEventListener('load', function() {\n    addHoverEffects();\n});"